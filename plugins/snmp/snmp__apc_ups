#!/usr/bin/perl
#
# Copyright (C) 2008 Gorlow Maxim [Sheridan] gorlov.maxim@gmail.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# If plugin not work, place http://www.michaelfmcnamara.com/files/mibs/powernet401.mib into system-wide snmp mibs dir ( net-snmp-config --default-mibdirs )
# and add 'mibs +PowerNet-MIB' to system-wide snmp.conf ( net-snmp-config --snmpconfpath )
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 

#
# Monitoring: 	IO voltage (volt), IO frequency (hz), UPS status (online, off....), Times,
#		Temperature (c), Battery capacity (%), UPS load (%), Current (ampers), Battery voltage
#

#
#%# family=snmpauto
#

$ENV{'MIBS'}="PowerNet-MIB";

use strict;
use Munin::Plugin;
use Munin::Plugin::SNMP;
#use Data::Dumper;

need_multigraph();

my $session = Munin::Plugin::SNMP->session();
$session->translate([-timeticks => 0x0]);
my ($host)  = Munin::Plugin::SNMP->config_session();
if (!defined($host)) { die "# Error: couldn't understand what I'm supposed to monitor."; }



my $graphs = 
{
  'volt' => 
  {
    'graph' =>
    {
	'title'    => 'IO Voltage, %s [%s]',
	'args'     => '--base 1000',
	'vlabel'   => 'Volt',
	'category' => 'ups',
	'info'     => 'This graph shows the IO voltage (volt) of %s [%s]',
	'order'    => 'input output max_input min_input'
    },
    'fields' =>
    {
	'output' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.4.2.1.0',
	    'field_data' =>
	    {
		'label'  => 'Output',
		'type'   => 'GAUGE',
		'info'   => 'Output voltage',
		'colour' => '439400',
		'draw'   => 'LINE2'
	    }
	},
	'input' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.3.2.1.0',
	    'field_data' =>
	    {
		'label'  => 'Input',
		'type'   => 'GAUGE',
		'info'   => 'Input voltage',
		'colour' => '94002D',
		'draw'   => 'LINE2'
		
	    }
	},
	'max_input'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.3.2.2.0',
	    'field_data' =>
	    {
		'label'  => 'Input maximum',
		'type'   => 'GAUGE',
		'info'   => 'Maximum input voltage',
		'colour' => '8EF13C',
		'draw'   => 'LINE1'
	    }
	},
	'min_input'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.3.2.3.0',
	    'field_data' =>
	    {
		'label'  => 'Input minimum',
		'type'   => 'GAUGE',
		'info'   => 'Minimum input voltage',
		'colour' => 'A9F16C',
		'draw'   => 'LINE1'
	    }
	},
	'high_transfer_input'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.5.2.2.0',
	    'field_data' =>
	    {
		'label'  => 'High transfer input',
		'type'   => 'GAUGE',
		'info'   => 'High transfer input',
		'colour' => 'F13C73',
		'draw'   => 'LINE1'
	    }
	},
	'low_transfer_input'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.5.2.3.0',
	    'field_data' =>
	    {
		'label'  => 'Low transfer input',
		'type'   => 'GAUGE',
		'info'   => 'Low transfer input',
		'colour' => 'F16D95',
		'draw'   => 'LINE1'
	    }
	}
    }
  },
  'frequency' =>
  {
    'graph' =>
    {
	'title'    => 'Frequency, %s [%s]',
	'args'     => '--base 1000 -l 35 -u 65',
	'vlabel'   => 'Hz',
	'category' => 'ups',
	'info'     => 'This graph shows the frequency (Hz) of %s [%s]',
	'order'    => 'input output'
    },
    'fields' =>
    {
	'input'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.3.2.4.0',
	    'field_data' =>
	    {
		'label' => 'Input',
		'type'  => 'GAUGE',
		'info'  => 'Input frequency',
		'draw'  => 'LINE2'
	    }
	},
	'output' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.4.2.2.0',
	    'field_data' =>
	    {
		'label' => 'Output',
		'type'  => 'GAUGE',
		'info'  => 'Output frequency',
		'draw'  => 'LINE2'
	    }
	}
    }
  },
  'time' =>
  {
    'graph' =>
    {
	'title'    => 'Times, %s [%s]',
	'args'     => '--base 1000 -l 0',
	'vlabel'   => 'minutes',
	'category' => 'ups',
	'info'     => 'This graph shows the times in secunds of %s [%s]',
	'order'    => 'input output'
    },
    'fields' =>
    {
	'remaining'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.2.2.3.0',
	    'field_data' =>
	    {
		'label' => 'Run time remaining',
		'type'  => 'GAUGE',
		'info'  => 'The UPS battery run time remaining before battery exhaustion.',
		'draw'  => 'LINE2'
	    }
	},
	'low' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.5.2.8.0',
	    'field_data' =>
	    {
		'label' => 'Low battery run time',
		'type'  => 'GAUGE',
		'info'  => 'The desired run time of the UPS, in seconds, once the low battery condition is reached.',
		'draw'  => 'LINE2'
	    }
	}
    }
  },
  'battery_voltage' =>
  {
    'graph' =>
    {
	'title'    => 'Battery voltage, %s [%s]',
	'args'     => '--base 1000 -l 0',
	'vlabel'   => 'Volt',
	'category' => 'ups',
	'info'     => 'This graph shows the battery voltage (Hz) of %s [%s]',
	'order'    => 'input output'
    },
    'fields' =>
    {
	'nominal'  => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.2.2.7.0',
	    'field_data' =>
	    {
		'label' => 'Nominal',
		'type'  => 'GAUGE',
		'info'  => 'Nominal voltage',
		'draw'  => 'LINE2'
	    }
	},
	'actual' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.2.2.8.0',
	    'field_data' =>
	    {
		'label' => 'Actual',
		'type'  => 'GAUGE',
		'info'  => 'Actual voltage',
		'draw'  => 'LINE2'
	    }
	}
    }
  },
  'status' =>
  {
    'graph' =>
    {
	'title'    => 'Status, %s [%s]',
	'args'     => '--base 1000 -l 0 -u 12',
	'vlabel'   => 'Status change',
	'category' => 'ups',
	'info'     => 'This graph shows the status of %s [%s]',
	'order'    => 'unk onl obt osb tsl sbp off rbt swb hfb spr ost state'
    },
    'fields' =>
    {
	'state' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.4.1.1.0',
	    'field_data' =>
	    {
		'label'  => 'Status',
		'type'   => 'GAUGE',
		'info'   => 'Raw status',
		'colour' => '222222',
		'draw'   => 'LINE3',
		'min'    => '1',
		'max'    => '12'
	    }
	},
	'unk' => { 'field_data' => { 'label' => 'Unknown'                 , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'onl' => { 'field_data' => { 'label' => 'Online'                  , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'obt' => { 'field_data' => { 'label' => 'On battery'              , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'osb' => { 'field_data' => { 'label' => 'On smart boost'          , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'tsl' => { 'field_data' => { 'label' => 'Timed sleeping'          , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'sbp' => { 'field_data' => { 'label' => 'Software bypass'         , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'off' => { 'field_data' => { 'label' => 'Off'                     , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'rbt' => { 'field_data' => { 'label' => 'Rebooting'               , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'swb' => { 'field_data' => { 'label' => 'Switched bypass'         , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'hfb' => { 'field_data' => { 'label' => 'Hardware failure bypass' , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'spr' => { 'field_data' => { 'label' => 'Sleep until power return', 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
	'ost' => { 'field_data' => { 'label' => 'On smart trim'           , 'type'  => 'GAUGE', 'draw'  => 'AREA' } },
    }
  },
  'temperature' =>
  {
    'graph' =>
    {
	'title'    => 'Temperature, %s [%s]',
	'args'     => '--base 1000 -l 0',
	'vlabel'   => 'C',
	'category' => 'ups',
	'info'     => 'This graph shows the temperature (C) of %s [%s]'
    },
    'fields' =>
    {
	'battery' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.2.2.2.0',
	    'field_data' =>
	    {
		'label' => 'Battery temperature',
		'type'  => 'GAUGE',
		'info'  => 'Battery temperature',
		'draw'  => 'LINE2'
	    }
	},
	'sensor1' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.25.1.2.1.6.1.1',
	    'field_data' =>
	    {
		'label' => 'Sensor 1',
		'type'  => 'GAUGE',
		'info'  => 'Sensor 1 temperature',
		'draw'  => 'LINE2'
	    }
	},
	'sensor2' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.25.1.2.1.6.1.2',
	    'field_data' =>
	    {
		'label' => 'Sensor 2',
		'type'  => 'GAUGE',
		'info'  => 'Sensor 2 temperature',
		'draw'  => 'LINE2'
	    }
	}
    }
  },
  'battery_capacity' =>
  {
    'graph' =>
    {
	'title'    => 'Battery capacity, %s [%s]',
	'args'     => '--base 1000 -l 0 -u 100',
	'vlabel'   => 'Percent',
	'category' => 'ups',
	'info'     => 'This graph shows the battery capacity in percents of %s [%s]'
    },
    'fields' =>
    {
	'capacity' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.2.2.1.0',
	    'field_data' =>
	    {
		'label'    => 'Battery capacity',
		'type'     => 'GAUGE',
		'info'     => 'Battery capacity',
		'draw'     => 'AREA',
		'min'      => '0',
		'max'      => '100',
		'warning'  => '30:',
		'critical' => '15:'
	    }
	}
    }
  },
  'load' =>
  {
    'graph' =>
    {
	'title'    => 'Load, %s [%s]',
	'args'     => '--base 1000 -l 0 -u 100',
	'vlabel'   => 'Percent',
	'category' => 'ups',
	'info'     => 'This graph shows the load in percents of %s [%s]'
    },
    'fields' =>
    {
	'output' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.4.2.3.0',
	    'field_data' =>
	    {
		'label'    => 'Load',
		'type'     => 'GAUGE',
		'info'     => 'Load',
		'draw'     => 'AREA',
		'min'      => '0',
		'max'      => '100',
		'warning'  => '85',
		'critical' => '95'
	    }
	}
    }
  },
  'current' =>
  {
    'graph' =>
    {
	'title'    => 'Current, %s [%s]',
	'args'     => '--base 1000 -l 0',
	'vlabel'   => 'Ampers',
	'category' => 'ups',
	'info'     => 'This graph shows the current (Ampers) of %s [%s]'
    },
    'fields' =>
    {
	'output' => 
	{
	    'oid' => '1.3.6.1.4.1.318.1.1.1.4.2.4.0',
	    'field_data' =>
	    {
		'label' => 'Output current',
		'type'  => 'GAUGE',
		'info'  => 'Output current',
		'draw'  => 'AREA'
	    }
	}
    }
  },

};

my $info = {'model' => '1.3.6.1.4.1.318.1.1.1.1.1.1.0', 'serial' => '1.3.6.1.4.1.318.1.1.1.1.2.3.0'};

sub get_snmp_value
{
    my $oid = $_[0];
    my $result = $session->get_single($oid) || 'U';
    if ($result eq 'noSuchInstance') { $result = 'U'; }
    return $result;
}

if ($ARGV[0] and $ARGV[0] eq "config")
{
    my $model  = get_snmp_value($info->{'model'} );
    my $serial = get_snmp_value($info->{'serial'});
    for my $graph_name (keys(%{$graphs}))
    {
	print(sprintf("host_name %s\n", $host));
	print(sprintf("multigraph %s\n", $graph_name));
	for my $graph_argument_name (keys(%{$graphs->{$graph_name}{'graph'}}))
	{
	    print(sprintf("graph_%s %s\n", $graph_argument_name, sprintf($graphs->{$graph_name}{'graph'}{$graph_argument_name}, $model, $serial)))
	}
	for my $field_name (keys(%{$graphs->{$graph_name}{'fields'}}))
	{
	    for my $field_argument_name (keys(%{$graphs->{$graph_name}{'fields'}{$field_name}{'field_data'}}))
	    {
		print(sprintf("%s.%s %s\n", $field_name, $field_argument_name, $graphs->{$graph_name}{'fields'}{$field_name}{'field_data'}{$field_argument_name}))
	    }
	}
    }
    exit 0;
}

for my $graph_name (keys(%{$graphs}))
{
    print(sprintf("host_name %s\n", $host));
    print(sprintf("multigraph %s\n", $graph_name));
    for my $field_name (keys(%{$graphs->{$graph_name}{'fields'}}))
    {
	next unless(exists($graphs->{$graph_name}{'fields'}{$field_name}{'oid'}));
	my $value = get_snmp_value($graphs->{$graph_name}{'fields'}{$field_name}{'oid'});
	if ($graph_name eq 'status')
	{
	    print(sprintf("state.value %s\n", $value));
	    print(sprintf("unk.value %s\n", $value == 1  || 0));
	    print(sprintf("onl.value %s\n", $value == 2  || 0));
	    print(sprintf("obt.value %s\n", $value == 3  || 0));
	    print(sprintf("osb.value %s\n", $value == 4  || 0));
	    print(sprintf("tsl.value %s\n", $value == 5  || 0));
	    print(sprintf("sbp.value %s\n", $value == 6  || 0));
	    print(sprintf("off.value %s\n", $value == 7  || 0));
	    print(sprintf("rbt.value %s\n", $value == 8  || 0));
	    print(sprintf("swb.value %s\n", $value == 9  || 0));
	    print(sprintf("hfb.value %s\n", $value == 10 || 0));
	    print(sprintf("spr.value %s\n", $value == 11 || 0));
	    print(sprintf("ost.value %s\n", $value == 12 || 0));
	}
	elsif ($graph_name eq 'time')
	{
	    print(sprintf("%s.value %.2f\n", $field_name, $value/6000));
	}
	else
	{
	    print(sprintf("%s.value %s\n", $field_name, $value));
	}
    }
}

