#!/usr/bin/perl -w
# -*- cperl -*-

=head1 NAME

snmp__switch - SNMP wildcard multigraph plugin for switches monitoring

=head1 APPLICABLE SYSTEMS

Any SNMP capable switch\router\modem.

=head1 CONFIGURATION

As a rule SNMP plugins need site specific configuration.  The default
configuration (shown here) will only work on insecure sites/devices:

   [snmp_*]
	env.version 2
        env.community public

In general SNMP is not very secure at all unless you use SNMP version
3 which supports authentication and privacy (encryption).  But in any
case the community string for your devices should not be "public".

Please see 'perldoc Munin::Plugin::SNMP' for further configuration
information.

=head1 MAGIC MARKERS

  #%# capabilities=snmpconf

=head1 VERSION

  $Id$

=head1 BUGS

None known.

=head1 FEATURES

Plugin monitors all device ports: discards, errors, status, traffic (unicast too)

=head1 AUTHOR

Gorlow Maxim aka Sheridan <sheridan@sheridan-home.ru> (email and jabber)

=head1 LICENSE

GPLv2

=cut

use strict;
use Munin::Plugin;
use Munin::Plugin::SNMP;
#use Data::Dumper;

need_multigraph();

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf") 
{
	print "index   1.3.6.1.2.1.2.2.1.1.\n";
	print "require 1.3.6.1.2.1.2.2.1.5. [1-9]\n";  # Speed
	print "require 1.3.6.1.2.1.2.2.1.10. [1-9]\n"; # ifInOctets
	exit 0;
}

my $session = Munin::Plugin::SNMP->session();
my ($host) = Munin::Plugin::SNMP->config_session();

my $graphs = 
{
    'traffic' =>
    {
	'fields'	=> 
	{
	    'in_octets'		=>
	    {
		'label'	=> 'Port %s in',
		'type'	=> 'DERIVE',
		'graph'	=> 'no',
		'cdef'	=> 'in_octets,8,*',
		'min'	=> '0',
	    },
	    'out_octets'	=>
	    {
		'label'	=> 'Port %s in/out',
		'info'	=> 'Bytes received/sent by this interface',
		'type'	=> 'DERIVE',
		'negative'=>'in_octets',
		'cdef'	=> 'out_octets,8,*',
		'min'	=> '0',
	    }
	},
	'graph'=>
	{
	    'title'	=> 'Switch traffic by ports',
	    'args'	=> '--base 1000',
	    'vlabel'	=> 'bytes in (-) / out (+) per \${graph_period}',
	    'category'	=> 'network',
	    'info'	=> 'Switch traffic by ports'
	}
    },
    'unicast' =>
    {
	'fields' 	=> 
	{
	    'in_unicast'	=>
	    {
		'label'	=> 'Port %s in',
		'type'	=> 'DERIVE',
		'graph'	=> 'no',
		'cdef'	=> 'in_unicast,8,*',
		'min'	=> '0',
	    },
	    'out_unicast'	=>
	    {
		'label'	=> 'Port %s in/out',
		'info'	=> 'Unicast bytes received/sent by this interface',
		'type'	=> 'DERIVE',
		'negative'=>'in_unicast',
		'cdef'	=> 'out_unicast,8,*',
		'min'	=> '0',
	    }
	},
	'graph'=>
	{
	    'title'	=> 'Switch unicast traffic by ports',
	    'args'	=> '--base 1000',
	    'vlabel'	=> 'bytes in (-) / out (+) per \${graph_period}',
	    'category'	=> 'network',
	    'info'	=> 'Switch unicast traffic by ports'
	}
    },
    'discards' =>
    {
	'fields' 	=> 
	{
	    'in_discards'	=>
	    {
		'label'	=> 'Port %s in',
		'type'	=> 'DERIVE',
		'graph'	=> 'no',
		'min'	=> '0',
	    },
	    'out_discards'	=>
	    {
		'label'	=> 'Port %s in/out',
		'info'	=> 'Received/sent discards by this interface',
		'type'	=> 'DERIVE',
		'negative'=>'in_discards',
		'min'	=> '0',
	    }
	},
	'graph'=>
	{
	    'title'	=> 'Switch discards by ports',
	    'args'	=> '--base 1000',
	    'vlabel'	=> 'packets in (-) / out (+) per \${graph_period}',
	    'category'	=> 'network',
	    'info'	=> 'Switch discards by ports'
	}
    },
    'errors' =>
    {
	'fields' 	=> 
	{
	    'in_errors'	=>
	    {
		'label'	=> 'Port %s in',
		'type'	=> 'DERIVE',
		'graph'	=> 'no',
		'min'	=> '0',
	    },
	    'out_errors'	=>
	    {
		'label'	=> 'Port %s in/out',
		'info'	=> 'Received/sent errors by this interface',
		'type'	=> 'DERIVE',
		'negative'=>'in_errors',
		'min'	=> '0',
	    }
	},
	'graph'=>
	{
	    'title'	=> 'Switch errors by ports',
	    'args'	=> '--base 1000',
	    'vlabel'	=> 'errors in (-) / out (+) per \${graph_period}',
	    'category'	=> 'network',
	    'info'	=> 'Switch errors by ports'
	}
    },
    'switchstatus' =>
    {
	'fields' 	=> 
	{
	    'speed'	=>
	    {
		'label'	=> 'Port %s speed',
		'type'	=> 'DERIVE',
		'graph'	=> 'no',
		'min'	=> '0',
	    },
	    'mtu'	=>
	    {
		'label'	=> 'Port %s speed/mtu',
		'info'	=> 'Interface status mtu / speed',
		'type'	=> 'DERIVE',
		'negative'=>'speed',
		'min'	=> '0',
	    }
	},
	'graph'=>
	{
	    'title'	=> 'Switch ports status',
	    'args'	=> '--base 1000',
	    'vlabel'	=> 'Staus mtu (-) / speed (+)',
	    'category'	=> 'network',
	    'info'	=> 'Switch ports status'
	}
    }
};

my $data = $session->get_hash	(
    -baseoid => '1.3.6.1.2.1.2.2.1', # IF-MIB
    -cols    => {
	    1 => 'index',
	    2 => 'name',
	    4 => 'mtu',
	    5 => 'speed',
	    10 => 'in_octets',
	    11 => 'in_unicast',
	    13 => 'in_discards',
	    14 => 'in_errors',
	    16 => 'out_octets',
	    17 => 'out_unicast',
	    19 => 'out_discards',
	    20 => 'out_errors',
		}
			);
#print Dumper($data);

if ($ARGV[0] and $ARGV[0] eq "config") 
{
    for my $graph_name (sort(keys(%{$graphs})))
    {
	print(sprintf("host_name %s\n", $host));
	print(sprintf("multigraph %s\n", $graph_name));
	for my $graph_arg (keys(%{$graphs->{$graph_name}{'graph'}}))
	{
	    print(sprintf("graph_%s %s\n", $graph_arg, $graphs->{$graph_name}{'graph'}{$graph_arg}));
	}
	my @order = ();
	for my $index (sort(keys(%{$data})))
	{
	    for my $field (sort(keys(%{$graphs->{$graph_name}{'fields'}})))
	    {
		my $field_name = sprintf("p%02d%s", $index, $field);
		for my $field_arg (sort(keys(%{$graphs->{$graph_name}{'fields'}{$field}})))
		{
		    my $arg = $graphs->{$graph_name}{'fields'}{$field}{$field_arg};
		    if ($field_arg eq 'negative' or $field_arg eq 'cdef')
		    {
			$arg = sprintf("p%02d%s", $index, $arg);
		    }
		    print(sprintf("%s.%s %s\n", $field_name, $field_arg, sprintf($arg, $index)));
		}
		push(@order, $field_name);
	    }
	}
	print(sprintf("graph_order %s\n",join(' ', sort(@order))));
	#print "\n";
    }
    exit 0;
}


for my $graph_name (sort(keys(%{$graphs})))
{
    print(sprintf("host_name %s\n", $host));
    print(sprintf("multigraph %s\n", $graph_name));
    for my $index (sort(keys(%{$data})))
    {
	for my $field (sort(keys(%{$graphs->{$graph_name}{'fields'}})))
	{
	    print(sprintf("p%02d%s.value %s\n", $index, $field, exists($data->{$index}{$field}) ? $data->{$index}{$field} : 'nan'));
	}
    }
    #print "\n";
}

