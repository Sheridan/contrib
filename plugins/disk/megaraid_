#!/usr/bin/perl -w
#
# Munin plugin for MegaRAID 
# This plugin can graph:- Currently Drive Temperature and Error Count
# 
#---------------------
# Examples
# Create a symbolic link to megaraid_<AdapterNumber>
#       ln -s /usr/share/munin/plugins/megaraid_ /etc/munin/plugins/megaraid_0
#           graph on adapter 0
# 
#---------------------
# Log
# Revision 0.1  2011/04/16  idobson
# -First version only basic support of the MegaRaid controller
# 
# Revision 0.2  2011/04/17 fkatzenb
# -Added bash statement to remove the log file created each time MegaCli64 is ran
# -Added a few comments and visual changes
# 
# Revision 1.0 2011/04/17 fkatzenb
# -Revamped Code to symbolic link for sensor type and future growth
# 
# Revision 1.1 2011/04/17 fkatzenb
# -Revised scalling
# 
# Revision 1.2 2011/04/28 fkatzenb
# -Added support for graph_info support
# -Added warning & critical alerts support
# -Added data info
# 
# Revision 2.0 2011/04/29 fkatzenb
# -Added remaining support for SMART Errors
# 
# Revision 2.1 2011/04/29 fkatzenb
# -Added version information for in the graph description
# 
# 
#---------------------
# 
# Add the following to your /etc/munin/plugin-conf.d/munin-node:
# 
#       [megaraid_*]
#       user root
# 
#---------------------
# 
# 
# Magic markers (optional - used by munin-config and installation scripts):
# 
#%# family=auto
#%# capabilities=autoconf
# 
my $DisplayVer=2.1;

use strict;
use warnings;

my $DevID=0; 		#Device Number found
my $DevData=0; 		#Device Data found 

# Parse out Adapter number and parameter desired from file name and remove whitespace
my $Adapter=`basename $0 | sed 's/^megaraid_//g' | tr '_' '-'` ;
chomp $Adapter;

# Locate MegaCli64 application and remove whitespace
my $Command="/opt/bin/megacli";
chomp $Command;
#print $Command;
# Use this to define future parameters to monitor
my %config = (
  temp => {
    lookfor => 'Drive Temperature :',
    label => 'Temp',
    title => "MegaRAID Adapter $Adapter: Drive Temperatures",
    vtitle => 'Celsius',
    graph_args => '--base 1000 -l 0',
    warning => '55',
    critical => '65',
    info_tag => "Temperature (C)",
    description => "Internal Temperatures for drives on Adapter $Adapter.",
    category => 'sensors'
  },
  error => {
    lookfor => 'Media Error Count: ',
    label => 'Media Err',
    title => "MegaRAID Adapter $Adapter: Media Errors (SMART)",
    vtitle => 'Number of Errors',
    graph_args => '--base 1000 -l 0',
    warning => '',
    critical => '',
    info_tag => "Media Errors (SMART)",
    description => "Number of SMART errors related to the drive's media on Adapter $Adapter.",
    category => 'megaraid'
  },
  other => {
    lookfor => 'Other Error Count: ',
    label => 'Other Err',
    title => "MegaRAID Adapter $Adapter: Others Errors (SMART)",
    vtitle => 'Number of Errors',
    graph_args => '--base 1000 -l 0',
    warning => '',
    critical => '',
    info_tag => "Other Errors (SMART)",
    description => "Number of SMART errors not related to the drive's media on Adapter $Adapter.",
    category => 'megaraid'
  },
  predictive => {
    lookfor => 'Predictive Failure Count: ',
    label => 'Predictive Err',
    title => "MegaRAID Adapter $Adapter: Predictive Errors (SMART)",
    vtitle => 'Number of Errors',
    graph_args => '--base 1000 -l 0',
    warning => '',
    critical => '',
    info_tag => "Predictive Errors (SMART)",
    description => "Number of SMART errors for each drive on Adapter $Adapter.",
    category => 'megaraid'
  }
);

#Auto config options
if ($ARGV[0] and $ARGV[0] eq "autoconf" ) 
{
   if (-e $Command ) 
   {
      print "yes\n";
      exit 0;
  } 
  else 
  {
      print "no\n";
      exit 1
 }
}

#Read Output of MegaRaid command
$Command.=" -PDList -a".$Adapter; 
#print $Command;
my @Output=qx($Command);

#Munin Config Options
if ($ARGV[0] and $ARGV[0] eq "config")
{
    for my $Type (keys(%config))
    {
	print "multigraph megaraid_$Type\n";
	print "graph_title $config{$Type}->{title}\n";
	print "graph_vtitle $config{$Type}->{vtitle}\n";
	print "graph_args $config{$Type}->{graph_args}\n";
	print "graph_scale yes\n";
	print "graph_category $config{$Type}->{category}\n";
	print "graph_info $config{$Type}->{description}\n";
	my $devices = {};
	for my $Line (@Output)
	{
	    $Line=~ s/\r//g;
	    $Line=~ s/\n//g;
   
	    #Find the device ID
	    if ( $Line=~ m/Slot Number: /i ) 
	    { 
		$DevID=$Line; 
		$DevID=~ s/Slot Number: //;
		$devices->{$DevID} = {};
		
	    }
	    if ( $Line=~ m/Inquiry Data: /i ) 
	    { 
		my $name = $Line; 
		$name    =~ s/Inquiry Data: //;
		$name    =~ s/\s+/ /ig;
		$devices->{$DevID}{'name'} = $name;
		
	    }
	}
	my @order;
	for my $id (keys(%{$devices}))
	{
	    my $field_name = sprintf("A%d_D%02d_%s", $Adapter, $id, $Type);
	    print(sprintf("%s.label A%d:D%02d %s\n", $field_name ,$Adapter, $id, $devices->{$id}{'name'}));
	    print(sprintf("%s.info Adapter: %d / Drive: %02d / %s / %s\n", $field_name ,$Adapter, $id, $devices->{$id}{'name'}, $config{$Type}->{info_tag}));
	    if ($config{$Type}->{warning} ne '' ) 
	    {
	        print(sprintf("%s.warning %s\n", $field_name, $config{$Type}->{warning}));
	    }
	    if ($config{$Type}->{critical} ne '') 
	    {
		print(sprintf("%s.critical %s\n", $field_name, $config{$Type}->{critical}));
	    }
	    push(@order, $field_name);
	}
	print(sprintf("graph_order %s\n", join(" ", sort {$a cmp $b} @order)));
    } 
    exit 0;
}

#Actually dump the data
for my $Type (keys(%config))
{
    print "multigraph megaraid_$Type\n";
    foreach my $Line (@Output) 
    {
	$Line=~ s/\r//g;
	$Line=~ s/\n//g;

	#Find the device ID
	if ( $Line=~ m/Slot Number: /i ) { $DevID=$Line; $DevID=~ s/Slot Number: //; chomp $DevID; }

	#Find the data and print it out
	if ( $Line=~ m/$config{$Type}->{lookfor}/i ) 
	{
	    my $field_name = sprintf("A%d_D%02d_%s", $Adapter, $DevID, $Type);
	    $DevData=$Line;
	    $DevData=~s/$config{$Type}->{lookfor}//;
	    $DevData=~s/C.*//;
	    chomp $DevData;
	    print(sprintf("%s.value %s\n", $field_name, $DevData));
	}
    }
}

#Remove log file created by running MegaCli
   unlink "MegaSAS.log";

exit 0;
